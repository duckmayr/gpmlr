// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// octave_is_embedded
bool octave_is_embedded();
RcppExport SEXP _gpmlr_octave_is_embedded() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(octave_is_embedded());
    return rcpp_result_gen;
END_RCPP
}
// octave_has_ever_been_embedded
bool octave_has_ever_been_embedded();
RcppExport SEXP _gpmlr_octave_has_ever_been_embedded() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(octave_has_ever_been_embedded());
    return rcpp_result_gen;
END_RCPP
}
// embed_octave
bool embed_octave(bool verbose, bool force);
RcppExport SEXP _gpmlr_embed_octave(SEXP verboseSEXP, SEXP forceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type force(forceSEXP);
    rcpp_result_gen = Rcpp::wrap(embed_octave(verbose, force));
    return rcpp_result_gen;
END_RCPP
}
// exit_octave
bool exit_octave(bool verbose);
RcppExport SEXP _gpmlr_exit_octave(SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(exit_octave(verbose));
    return rcpp_result_gen;
END_RCPP
}
// gpml1
Rcpp::List gpml1(Rcpp::List hyperparameters, Rcpp::List inffunc, Rcpp::List meanfunc, Rcpp::List covfunc, Rcpp::List likfunc, Rcpp::NumericVector x, Rcpp::NumericVector y);
RcppExport SEXP _gpmlr_gpml1(SEXP hyperparametersSEXP, SEXP inffuncSEXP, SEXP meanfuncSEXP, SEXP covfuncSEXP, SEXP likfuncSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type hyperparameters(hyperparametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type inffunc(inffuncSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type meanfunc(meanfuncSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type covfunc(covfuncSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type likfunc(likfuncSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(gpml1(hyperparameters, inffunc, meanfunc, covfunc, likfunc, x, y));
    return rcpp_result_gen;
END_RCPP
}
// gpml2
Rcpp::List gpml2(Rcpp::List hyperparameters, Rcpp::List inffunc, Rcpp::List meanfunc, Rcpp::List covfunc, Rcpp::List likfunc, Rcpp::NumericVector training_x, Rcpp::NumericVector training_y, Rcpp::NumericVector testing_x);
RcppExport SEXP _gpmlr_gpml2(SEXP hyperparametersSEXP, SEXP inffuncSEXP, SEXP meanfuncSEXP, SEXP covfuncSEXP, SEXP likfuncSEXP, SEXP training_xSEXP, SEXP training_ySEXP, SEXP testing_xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type hyperparameters(hyperparametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type inffunc(inffuncSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type meanfunc(meanfuncSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type covfunc(covfuncSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type likfunc(likfuncSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type training_x(training_xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type training_y(training_ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type testing_x(testing_xSEXP);
    rcpp_result_gen = Rcpp::wrap(gpml2(hyperparameters, inffunc, meanfunc, covfunc, likfunc, training_x, training_y, testing_x));
    return rcpp_result_gen;
END_RCPP
}
// gpml3
Rcpp::List gpml3(Rcpp::List hyperparameters, Rcpp::List inffunc, Rcpp::List meanfunc, Rcpp::List covfunc, Rcpp::List likfunc, Rcpp::NumericVector training_x, Rcpp::NumericVector training_y, Rcpp::NumericVector testing_x, Rcpp::NumericVector testing_y);
RcppExport SEXP _gpmlr_gpml3(SEXP hyperparametersSEXP, SEXP inffuncSEXP, SEXP meanfuncSEXP, SEXP covfuncSEXP, SEXP likfuncSEXP, SEXP training_xSEXP, SEXP training_ySEXP, SEXP testing_xSEXP, SEXP testing_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type hyperparameters(hyperparametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type inffunc(inffuncSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type meanfunc(meanfuncSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type covfunc(covfuncSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type likfunc(likfuncSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type training_x(training_xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type training_y(training_ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type testing_x(testing_xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type testing_y(testing_ySEXP);
    rcpp_result_gen = Rcpp::wrap(gpml3(hyperparameters, inffunc, meanfunc, covfunc, likfunc, training_x, training_y, testing_x, testing_y));
    return rcpp_result_gen;
END_RCPP
}
// print_path
void print_path();
RcppExport SEXP _gpmlr_print_path() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    print_path();
    return R_NilValue;
END_RCPP
}
// add_to_path
void add_to_path(Rcpp::StringVector x);
RcppExport SEXP _gpmlr_add_to_path(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type x(xSEXP);
    add_to_path(x);
    return R_NilValue;
END_RCPP
}
// set_wd
void set_wd(Rcpp::StringVector x);
RcppExport SEXP _gpmlr_set_wd(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type x(xSEXP);
    set_wd(x);
    return R_NilValue;
END_RCPP
}
// set_hyperparameters
Rcpp::List set_hyperparameters(Rcpp::List hyp, Rcpp::List inf, Rcpp::List mean, Rcpp::List cov, Rcpp::List lik, Rcpp::NumericVector x, Rcpp::NumericVector y, int n_evals);
RcppExport SEXP _gpmlr_set_hyperparameters(SEXP hypSEXP, SEXP infSEXP, SEXP meanSEXP, SEXP covSEXP, SEXP likSEXP, SEXP xSEXP, SEXP ySEXP, SEXP n_evalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type hyp(hypSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type inf(infSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cov(covSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type lik(likSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n_evals(n_evalsSEXP);
    rcpp_result_gen = Rcpp::wrap(set_hyperparameters(hyp, inf, mean, cov, lik, x, y, n_evals));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gpmlr_octave_is_embedded", (DL_FUNC) &_gpmlr_octave_is_embedded, 0},
    {"_gpmlr_octave_has_ever_been_embedded", (DL_FUNC) &_gpmlr_octave_has_ever_been_embedded, 0},
    {"_gpmlr_embed_octave", (DL_FUNC) &_gpmlr_embed_octave, 2},
    {"_gpmlr_exit_octave", (DL_FUNC) &_gpmlr_exit_octave, 1},
    {"_gpmlr_gpml1", (DL_FUNC) &_gpmlr_gpml1, 7},
    {"_gpmlr_gpml2", (DL_FUNC) &_gpmlr_gpml2, 8},
    {"_gpmlr_gpml3", (DL_FUNC) &_gpmlr_gpml3, 9},
    {"_gpmlr_print_path", (DL_FUNC) &_gpmlr_print_path, 0},
    {"_gpmlr_add_to_path", (DL_FUNC) &_gpmlr_add_to_path, 1},
    {"_gpmlr_set_wd", (DL_FUNC) &_gpmlr_set_wd, 1},
    {"_gpmlr_set_hyperparameters", (DL_FUNC) &_gpmlr_set_hyperparameters, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_gpmlr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
